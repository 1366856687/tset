# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8080
  servlet:
    # 应用的访问路径
    context-path: /test
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # tomcat最大线程数，默认为200
    max-threads: 800
    # Tomcat启动初始化的线程数，默认值25
    min-spare-threads: 30

spring:
  profiles: uat
  autoconfigure:
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
  datasource:
    #druid 数据源专有配置,对应的是 com.alibaba.druid.pool.DruidDataSource 中的属性
    druid:
      ########## 过滤器 ##########
      #配置监控统计的内置过滤器：stat-监控统计(必须配置，否则监控不到sql)、wall-防御sql注入、log4j2-日志记录框架(值与应用中的日志框架保持一致，如 log4j、log4j、slf4j等等)
      filters: stat,wall,slf4j
      #自定义过滤器配置：stat、slf4j、log4j、log4j2、commons-log、wall
      #内置Filter都是默认配置，无法满足需求时，则可以自定义 Filter，自定义的过滤器默认都是没有开启的。
      filter:
        stat: #状态监控过滤器
          enabled: true
          db-type: mysql
          log-slow-sql: true  #开启慢sql监控，超过指定时间则认为是慢sql，记录到日志中
          slow-sql-millis: 5000
        slf4j: #日志监控过滤器，使用slf4j 进行日志输出
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
        wall: #防火墙过滤器
          enabled: true
          config:
            delete-allow: false     #不允许删除数据
            drop-table-allow: false #不允许删除表
      ########## WebStatFilter：web 状态监控过滤器 ##########
      web-stat-filter:
        enabled: true
        url-pattern: /*                 #过滤所有url
        exclusions: "*.js,*.css,*.gif,*.jpg,*.png,*.ico,/druid/*"   # 排除一些不必要的url
        session-stat-enable: true       #开启session统计功能
        session-stat-max-count: 1000    #session的最大个数,默认100
      ########## StatViewServlet(监控页面路径配置)，用于展示Druid的监控统计信息 ##########
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*           #访问内置监控页面的路径，内置监控页面的首页是 http://127.0.0.1:8080/druid/login.html 或者 /druid/index.html
        reset-enable: false             #不允许清空统计数据,重新计算
        login-username: admin            #配置监控页面登陆用户
        login-password: 123456          #配置监控页面登陆密码
        allow: 127.0.0.1                #允许访问的地址,如果没有配置或者为空，则允许所有访问
        deny:                           #拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝
    dynamic:
      p6spy: true # 默认false,建议线上关闭。
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      druid: # 全局druid参数，单独数据源配置为空时取全局配置
        initialSize: 10 #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时,默认0
        maxActive: 200  #最大连接池数量,默认8
        minIdle: 10     #最小连接池数量
        maxWait: 60000  #获取连接时最大等待时间,单位毫秒。配置了maxWait之后,缺省启用公平锁,并发效率会有所下降,如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
        timeBetweenEvictionRunsMillis: 60000 #1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据(详细看testWhileIdle属性的说明)
        minEvictableIdleTimeMillis: 300000   #设置连接最小可收回空闲时间(毫秒)，默认为 1000L * 60L * 30L
        maxEvictableIdleTimeMillis: 900000   #设置连接最大可收回空闲时间(毫秒)，默认为 1000L * 60L * 60L * 7
        validationQuery: SELECT 1 FROM DUAL #用来检测连接是否有效的sql,求是一个查询语句。默认为null，此时testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
        testWhileIdle: true #申请连接的时候检测,如果空闲时间大于timeBetweenEvictionRunsMillis,执行validationQuery检测连接是否有效,默认为true
        testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认false.
        testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认false.
        poolPreparedStatements: true #是否缓存preparedStatement,也就是PSCache。PSCache对支持游标的数据库性能提升巨大,比如说oracle,在mysql下建议关闭。
        #要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
        #在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
        maxOpenPreparedStatements: 20
        #连接池中的 minIdle 数量以内的连接，空闲时间超过 minEvictableIdleTimeMillis，则会执行 keepAlive 操作
        keepAlive: true
        maxPoolPreparedStatementPerConnectionSize: 20 #每个连接大小的最大池准备语句数
        useGlobalDataSourceStat: true #是否使用全局数据源统计,默认false
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 #连接属性
      datasource:
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/jtzx_research?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
          username: root
          password: 123456
          druid:
            #配置master 默认连接池参数
            # 连接池的配置信息
            # 初始化大小，最小，最大
            initial-size: 3
            min-idle: 3
            maxActive: 8
        slave:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/jtzx_test?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
          username: root
          password: 123456
          druid:
            # 连接池的配置信息
            # 初始化大小，最小，最大
            initial-size: 2
            min-idle: 2
            maxActive: 2
            # 配置获取连接等待超时的时间
            maxWait: 600000
            # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
            timeBetweenEvictionRunsMillis: 90000
            # 配置一个连接在池中最小生存的时间，单位是毫秒
            minEvictableIdleTimeMillis: 200000
            # 打开PSCache，并且指定每个连接上PSCache的大小
            poolPreparedStatements: true
            maxPoolPreparedStatementPerConnectionSize: 20
            # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
            connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000

  redis:
    host: localhost
    port: 6379
    # Redis数据库索引（默认为0）
    database: 0
    password:
    # 连接超时时间（毫秒）
    timeout: 200
    lettuce:
      pool:
        # 连接池最大连接数(使用负值表示没有限制) 默认为8
        max-active: 8
        # 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1
        max-wait: -1ms
        # 连接池中的最大空闲连接 默认为8
        max-idle: 8
        # 连接池中的最小空闲连接 默认为 0
        min-idle: 0

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: com.test.dao.mapper/*Mapper.xml #mapper文件位置
